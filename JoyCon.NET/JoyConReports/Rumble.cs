using System;
using System.Linq;
using System.Runtime.InteropServices;

namespace wtf.cluster.joycon.JoyConReports;

/// <summary>
/// Rumble data, e.g. frequency and amplitude.
/// </summary>
[StructLayout(LayoutKind.Sequential, Size = 4, Pack = 1)]
public class Rumble
{
    [MarshalAs(UnmanagedType.ByValArray, SizeConst = 4)]
    private readonly byte[] rumbleData;

    /// <summary>
    /// Frequency of the rumble.
    /// </summary>
    public double Frequency { get; }

    /// <summary>
    /// Amplitude of the rumble.
    /// </summary>
    public double Amplitude { get; }

    /// <summary>
    /// Constructor.
    /// </summary>
    /// <param name="freq">Frequency.</param>
    /// <param name="amp">Amplitude.</param>
    /// <exception cref="ArgumentOutOfRangeException">Thrown when frequency or amplitude is out of range.</exception>
    public Rumble(double freq, double amp)
    {
        if (amp == 0)
        {
            (Frequency, Amplitude) = (freq, amp);
            rumbleData = [0x00, 0x01, 0x40, 0x40];
            return;
        }

        var freqArray = FreqTable.Select(f => f.Value).ToArray();
        if (freq < freqArray[0] || freq > freqArray[^1])
        {
            throw new ArgumentOutOfRangeException(nameof(freq), $"Frequency must be between {freqArray[0]} and {freqArray[^1]}.");
        }
        var freqIndex = Array.BinarySearch(freqArray, freq);
        if (freqIndex < 0)
        {
            freqIndex = ~freqIndex - 1;
        }

        var ampArray = AmpTable.Select(f => f.Value).ToArray();
        if (amp < ampArray[0] || amp > ampArray[^1])
        {
            throw new ArgumentOutOfRangeException(nameof(amp), $"Amplitude must be between {ampArray[0]} and {ampArray[^1]}.");
        }
        var ampIndex = Array.BinarySearch(ampArray, amp);
        if (ampIndex < 0)
        {
            ampIndex = ~ampIndex - 1;
        }

        var dataFreq = FreqTable[freqIndex].Data;
        var dataAmp = AmpTable[ampIndex].Data;
        rumbleData = [(byte)(dataFreq[0] | dataAmp[0]), (byte)(dataFreq[1] | dataAmp[1]), (byte)(dataFreq[2] | dataAmp[2]), (byte)(dataFreq[3] | dataAmp[3])];
        Frequency = FreqTable[freqIndex].Value;
        Amplitude = AmpTable[ampIndex].Value;
    }

    /// <summary>
    /// Default constructor, creates a disabled rumble.
    /// </summary>
    public Rumble() : this(0, 0)
    {
    }

    /// <summary>
    /// Returns raw data.
    /// </summary>
    /// <returns>Data.</returns>
    public byte[] ToBytes() => rumbleData.ToArray();

    /// <inheritdoc />
    public override string ToString() => $"Frequency: {Frequency}, amplitude: {Amplitude}";

    /* Source: https://github.com/dekuNukem/Nintendo_Switch_Reverse_Engineering/blob/master/rumble_data_table.md */
    private static readonly Rec[] FreqTable =
    [
        new Rec(40.876, new byte[] { 0x00, 0x00, 0x01, 0x00 }),
        new Rec(41.771, new byte[] { 0x00, 0x00, 0x02, 0x00 }),
        new Rec(42.686, new byte[] { 0x00, 0x00, 0x03, 0x00 }),
        new Rec(43.620, new byte[] { 0x00, 0x00, 0x04, 0x00 }),
        new Rec(44.575, new byte[] { 0x00, 0x00, 0x05, 0x00 }),
        new Rec(45.552, new byte[] { 0x00, 0x00, 0x06, 0x00 }),
        new Rec(46.549, new byte[] { 0x00, 0x00, 0x07, 0x00 }),
        new Rec(47.568, new byte[] { 0x00, 0x00, 0x08, 0x00 }),
        new Rec(48.610, new byte[] { 0x00, 0x00, 0x09, 0x00 }),
        new Rec(49.674, new byte[] { 0x00, 0x00, 0x0A, 0x00 }),
        new Rec(50.762, new byte[] { 0x00, 0x00, 0x0B, 0x00 }),
        new Rec(51.874, new byte[] { 0x00, 0x00, 0x0C, 0x00 }),
        new Rec(53.009, new byte[] { 0x00, 0x00, 0x0D, 0x00 }),
        new Rec(54.170, new byte[] { 0x00, 0x00, 0x0E, 0x00 }),
        new Rec(55.356, new byte[] { 0x00, 0x00, 0x0F, 0x00 }),
        new Rec(56.569, new byte[] { 0x00, 0x00, 0x10, 0x00 }),
        new Rec(57.807, new byte[] { 0x00, 0x00, 0x11, 0x00 }),
        new Rec(59.073, new byte[] { 0x00, 0x00, 0x12, 0x00 }),
        new Rec(60.367, new byte[] { 0x00, 0x00, 0x13, 0x00 }),
        new Rec(61.688, new byte[] { 0x00, 0x00, 0x14, 0x00 }),
        new Rec(63.039, new byte[] { 0x00, 0x00, 0x15, 0x00 }),
        new Rec(64.420, new byte[] { 0x00, 0x00, 0x16, 0x00 }),
        new Rec(65.830, new byte[] { 0x00, 0x00, 0x17, 0x00 }),
        new Rec(67.272, new byte[] { 0x00, 0x00, 0x18, 0x00 }),
        new Rec(68.745, new byte[] { 0x00, 0x00, 0x19, 0x00 }),
        new Rec(70.250, new byte[] { 0x00, 0x00, 0x1A, 0x00 }),
        new Rec(71.788, new byte[] { 0x00, 0x00, 0x1B, 0x00 }),
        new Rec(73.360, new byte[] { 0x00, 0x00, 0x1C, 0x00 }),
        new Rec(74.967, new byte[] { 0x00, 0x00, 0x1D, 0x00 }),
        new Rec(76.608, new byte[] { 0x00, 0x00, 0x1E, 0x00 }),
        new Rec(78.286, new byte[] { 0x00, 0x00, 0x1F, 0x00 }),
        new Rec(80.000, new byte[] { 0x00, 0x00, 0x20, 0x00 }),
        new Rec(81.752, new byte[] { 0x04, 0x00, 0x21, 0x00 }),
        new Rec(83.542, new byte[] { 0x08, 0x00, 0x22, 0x00 }),
        new Rec(85.371, new byte[] { 0x0C, 0x00, 0x23, 0x00 }),
        new Rec(87.241, new byte[] { 0x10, 0x00, 0x24, 0x00 }),
        new Rec(89.151, new byte[] { 0x14, 0x00, 0x25, 0x00 }),
        new Rec(91.103, new byte[] { 0x18, 0x00, 0x26, 0x00 }),
        new Rec(93.098, new byte[] { 0x1C, 0x00, 0x27, 0x00 }),
        new Rec(95.137, new byte[] { 0x20, 0x00, 0x28, 0x00 }),
        new Rec(97.220, new byte[] { 0x24, 0x00, 0x29, 0x00 }),
        new Rec(99.349, new byte[] { 0x28, 0x00, 0x2A, 0x00 }),
        new Rec(101.524, new byte[] { 0x2C, 0x00, 0x2B, 0x00 }),
        new Rec(103.747, new byte[] { 0x30, 0x00, 0x2C, 0x00 }),
        new Rec(106.019, new byte[] { 0x34, 0x00, 0x2D, 0x00 }),
        new Rec(108.340, new byte[] { 0x38, 0x00, 0x2E, 0x00 }),
        new Rec(110.713, new byte[] { 0x3C, 0x00, 0x2F, 0x00 }),
        new Rec(113.137, new byte[] { 0x40, 0x00, 0x30, 0x00 }),
        new Rec(115.614, new byte[] { 0x44, 0x00, 0x31, 0x00 }),
        new Rec(118.146, new byte[] { 0x48, 0x00, 0x32, 0x00 }),
        new Rec(120.733, new byte[] { 0x4C, 0x00, 0x33, 0x00 }),
        new Rec(123.377, new byte[] { 0x50, 0x00, 0x34, 0x00 }),
        new Rec(126.078, new byte[] { 0x54, 0x00, 0x35, 0x00 }),
        new Rec(128.839, new byte[] { 0x58, 0x00, 0x36, 0x00 }),
        new Rec(131.660, new byte[] { 0x5C, 0x00, 0x37, 0x00 }),
        new Rec(134.543, new byte[] { 0x60, 0x00, 0x38, 0x00 }),
        new Rec(137.490, new byte[] { 0x64, 0x00, 0x39, 0x00 }),
        new Rec(140.500, new byte[] { 0x68, 0x00, 0x3A, 0x00 }),
        new Rec(143.577, new byte[] { 0x6C, 0x00, 0x3B, 0x00 }),
        new Rec(146.721, new byte[] { 0x70, 0x00, 0x3C, 0x00 }),
        new Rec(149.933, new byte[] { 0x74, 0x00, 0x3D, 0x00 }),
        new Rec(153.217, new byte[] { 0x78, 0x00, 0x3E, 0x00 }),
        new Rec(156.572, new byte[] { 0x7C, 0x00, 0x3F, 0x00 }),
        new Rec(160.000, new byte[] { 0x80, 0x00, 0x40, 0x00 }),
        new Rec(163.504, new byte[] { 0x84, 0x00, 0x41, 0x00 }),
        new Rec(167.084, new byte[] { 0x88, 0x00, 0x42, 0x00 }),
        new Rec(170.742, new byte[] { 0x8C, 0x00, 0x43, 0x00 }),
        new Rec(174.481, new byte[] { 0x90, 0x00, 0x44, 0x00 }),
        new Rec(178.302, new byte[] { 0x94, 0x00, 0x45, 0x00 }),
        new Rec(182.206, new byte[] { 0x98, 0x00, 0x46, 0x00 }),
        new Rec(186.196, new byte[] { 0x9C, 0x00, 0x47, 0x00 }),
        new Rec(190.273, new byte[] { 0xA0, 0x00, 0x48, 0x00 }),
        new Rec(194.440, new byte[] { 0xA4, 0x00, 0x49, 0x00 }),
        new Rec(198.697, new byte[] { 0xA8, 0x00, 0x4A, 0x00 }),
        new Rec(203.048, new byte[] { 0xAC, 0x00, 0x4B, 0x00 }),
        new Rec(207.494, new byte[] { 0xB0, 0x00, 0x4C, 0x00 }),
        new Rec(212.038, new byte[] { 0xB4, 0x00, 0x4D, 0x00 }),
        new Rec(216.681, new byte[] { 0xB8, 0x00, 0x4E, 0x00 }),
        new Rec(221.426, new byte[] { 0xBC, 0x00, 0x4F, 0x00 }),
        new Rec(226.274, new byte[] { 0xC0, 0x00, 0x50, 0x00 }),
        new Rec(231.229, new byte[] { 0xC4, 0x00, 0x51, 0x00 }),
        new Rec(236.292, new byte[] { 0xC8, 0x00, 0x52, 0x00 }),
        new Rec(241.466, new byte[] { 0xCC, 0x00, 0x53, 0x00 }),
        new Rec(246.754, new byte[] { 0xD0, 0x00, 0x54, 0x00 }),
        new Rec(252.157, new byte[] { 0xD4, 0x00, 0x55, 0x00 }),
        new Rec(257.678, new byte[] { 0xD8, 0x00, 0x56, 0x00 }),
        new Rec(263.321, new byte[] { 0xDC, 0x00, 0x57, 0x00 }),
        new Rec(269.087, new byte[] { 0xE0, 0x00, 0x58, 0x00 }),
        new Rec(274.979, new byte[] { 0xE4, 0x00, 0x59, 0x00 }),
        new Rec(281.000, new byte[] { 0xE8, 0x00, 0x5A, 0x00 }),
        new Rec(287.153, new byte[] { 0xEC, 0x00, 0x5B, 0x00 }),
        new Rec(293.441, new byte[] { 0xF0, 0x00, 0x5C, 0x00 }),
        new Rec(299.867, new byte[] { 0xF4, 0x00, 0x5D, 0x00 }),
        new Rec(306.433, new byte[] { 0xF8, 0x00, 0x5E, 0x00 }),
        new Rec(313.143, new byte[] { 0xFC, 0x00, 0x5F, 0x00 }),
        new Rec(320.000, new byte[] { 0x00, 0x01, 0x60, 0x00 }),
        new Rec(327.007, new byte[] { 0x04, 0x01, 0x61, 0x00 }),
        new Rec(334.168, new byte[] { 0x08, 0x01, 0x62, 0x00 }),
        new Rec(341.485, new byte[] { 0x0C, 0x01, 0x63, 0x00 }),
        new Rec(348.962, new byte[] { 0x10, 0x01, 0x64, 0x00 }),
        new Rec(356.604, new byte[] { 0x14, 0x01, 0x65, 0x00 }),
        new Rec(364.412, new byte[] { 0x18, 0x01, 0x66, 0x00 }),
        new Rec(372.392, new byte[] { 0x1C, 0x01, 0x67, 0x00 }),
        new Rec(380.546, new byte[] { 0x20, 0x01, 0x68, 0x00 }),
        new Rec(388.879, new byte[] { 0x24, 0x01, 0x69, 0x00 }),
        new Rec(397.395, new byte[] { 0x28, 0x01, 0x6A, 0x00 }),
        new Rec(406.096, new byte[] { 0x2C, 0x01, 0x6B, 0x00 }),
        new Rec(414.989, new byte[] { 0x30, 0x01, 0x6C, 0x00 }),
        new Rec(424.076, new byte[] { 0x34, 0x01, 0x6D, 0x00 }),
        new Rec(433.362, new byte[] { 0x38, 0x01, 0x6E, 0x00 }),
        new Rec(442.851, new byte[] { 0x3C, 0x01, 0x6F, 0x00 }),
        new Rec(452.548, new byte[] { 0x40, 0x01, 0x70, 0x00 }),
        new Rec(462.458, new byte[] { 0x44, 0x01, 0x71, 0x00 }),
        new Rec(472.584, new byte[] { 0x48, 0x01, 0x72, 0x00 }),
        new Rec(482.933, new byte[] { 0x4C, 0x01, 0x73, 0x00 }),
        new Rec(493.507, new byte[] { 0x50, 0x01, 0x74, 0x00 }),
        new Rec(504.314, new byte[] { 0x54, 0x01, 0x75, 0x00 }),
        new Rec(515.357, new byte[] { 0x58, 0x01, 0x76, 0x00 }),
        new Rec(526.642, new byte[] { 0x5C, 0x01, 0x77, 0x00 }),
        new Rec(538.174, new byte[] { 0x60, 0x01, 0x78, 0x00 }),
        new Rec(549.958, new byte[] { 0x64, 0x01, 0x79, 0x00 }),
        new Rec(562.001, new byte[] { 0x68, 0x01, 0x7A, 0x00 }),
        new Rec(574.307, new byte[] { 0x6C, 0x01, 0x7B, 0x00 }),
        new Rec(586.883, new byte[] { 0x70, 0x01, 0x7C, 0x00 }),
        new Rec(599.734, new byte[] { 0x74, 0x01, 0x7D, 0x00 }),
        new Rec(612.866, new byte[] { 0x78, 0x01, 0x7E, 0x00 }),
        new Rec(626.286, new byte[] { 0x7C, 0x01, 0x7F, 0x00 }),
        new Rec(640.000, new byte[] { 0x80, 0x01, 0x00, 0x00 }),
        new Rec(654.014, new byte[] { 0x84, 0x01, 0x00, 0x00 }),
        new Rec(668.335, new byte[] { 0x88, 0x01, 0x00, 0x00 }),
        new Rec(682.970, new byte[] { 0x8C, 0x01, 0x00, 0x00 }),
        new Rec(697.925, new byte[] { 0x90, 0x01, 0x00, 0x00 }),
        new Rec(713.208, new byte[] { 0x94, 0x01, 0x00, 0x00 }),
        new Rec(728.825, new byte[] { 0x98, 0x01, 0x00, 0x00 }),
        new Rec(744.784, new byte[] { 0x9C, 0x01, 0x00, 0x00 }),
        new Rec(761.093, new byte[] { 0xA0, 0x01, 0x00, 0x00 }),
        new Rec(777.758, new byte[] { 0xA4, 0x01, 0x00, 0x00 }),
        new Rec(794.789, new byte[] { 0xA8, 0x01, 0x00, 0x00 }),
        new Rec(812.193, new byte[] { 0xAC, 0x01, 0x00, 0x00 }),
        new Rec(829.977, new byte[] { 0xB0, 0x01, 0x00, 0x00 }),
        new Rec(848.151, new byte[] { 0xB4, 0x01, 0x00, 0x00 }),
        new Rec(866.724, new byte[] { 0xB8, 0x01, 0x00, 0x00 }),
        new Rec(885.702, new byte[] { 0xBC, 0x01, 0x00, 0x00 }),
        new Rec(905.097, new byte[] { 0xC0, 0x01, 0x00, 0x00 }),
        new Rec(924.916, new byte[] { 0xC4, 0x01, 0x00, 0x00 }),
        new Rec(945.169, new byte[] { 0xC8, 0x01, 0x00, 0x00 }),
        new Rec(965.865, new byte[] { 0xCC, 0x01, 0x00, 0x00 }),
        new Rec(987.015, new byte[] { 0xD0, 0x01, 0x00, 0x00 }),
        new Rec(1008.628, new byte[] { 0xD4, 0x01, 0x00, 0x00 }),
        new Rec(1030.714, new byte[] { 0xD8, 0x01, 0x00, 0x00 }),
        new Rec(1053.283, new byte[] { 0xDC, 0x01, 0x00, 0x00 }),
        new Rec(1076.347, new byte[] { 0xE0, 0x01, 0x00, 0x00 }),
        new Rec(1099.916, new byte[] { 0xE4, 0x01, 0x00, 0x00 }),
        new Rec(1124.001, new byte[] { 0xE8, 0x01, 0x00, 0x00 }),
        new Rec(1148.614, new byte[] { 0xEC, 0x01, 0x00, 0x00 }),
        new Rec(1173.765, new byte[] { 0xF0, 0x01, 0x00, 0x00 }),
        new Rec(1199.467, new byte[] { 0xF4, 0x01, 0x00, 0x00 }),
        new Rec(1225.732, new byte[] { 0xF8, 0x01, 0x00, 0x00 }),
        new Rec(1252.572, new byte[] { 0xFC, 0x01, 0x00, 0x00 }),
    ];

    /* Source: https://github.com/dekuNukem/Nintendo_Switch_Reverse_Engineering/blob/master/rumble_data_table.md */
    private static readonly Rec[] AmpTable = [
        new Rec(0.000, new byte[] { 0x00, 0x00, 0x00, 0x40 }),
        new Rec(0.008, new byte[] { 0x00, 0x02, 0x80, 0x40 }),
        new Rec(0.012, new byte[] { 0x00, 0x04, 0x00, 0x41 }),
        new Rec(0.014, new byte[] { 0x00, 0x06, 0x80, 0x41 }),
        new Rec(0.017, new byte[] { 0x00, 0x08, 0x00, 0x42 }),
        new Rec(0.020, new byte[] { 0x00, 0x0A, 0x80, 0x42 }),
        new Rec(0.024, new byte[] { 0x00, 0x0C, 0x00, 0x43 }),
        new Rec(0.028, new byte[] { 0x00, 0x0E, 0x80, 0x43 }),
        new Rec(0.033, new byte[] { 0x00, 0x10, 0x00, 0x44 }),
        new Rec(0.040, new byte[] { 0x00, 0x12, 0x80, 0x44 }),
        new Rec(0.047, new byte[] { 0x00, 0x14, 0x00, 0x45 }),
        new Rec(0.056, new byte[] { 0x00, 0x16, 0x80, 0x45 }),
        new Rec(0.067, new byte[] { 0x00, 0x18, 0x00, 0x46 }),
        new Rec(0.080, new byte[] { 0x00, 0x1A, 0x80, 0x46 }),
        new Rec(0.095, new byte[] { 0x00, 0x1C, 0x00, 0x47 }),
        new Rec(0.112, new byte[] { 0x00, 0x1E, 0x80, 0x47 }),
        new Rec(0.117, new byte[] { 0x00, 0x20, 0x00, 0x48 }),
        new Rec(0.123, new byte[] { 0x00, 0x22, 0x80, 0x48 }),
        new Rec(0.128, new byte[] { 0x00, 0x24, 0x00, 0x49 }),
        new Rec(0.134, new byte[] { 0x00, 0x26, 0x80, 0x49 }),
        new Rec(0.140, new byte[] { 0x00, 0x28, 0x00, 0x4A }),
        new Rec(0.146, new byte[] { 0x00, 0x2A, 0x80, 0x4A }),
        new Rec(0.152, new byte[] { 0x00, 0x2C, 0x00, 0x4B }),
        new Rec(0.159, new byte[] { 0x00, 0x2E, 0x80, 0x4B }),
        new Rec(0.166, new byte[] { 0x00, 0x30, 0x00, 0x4C }),
        new Rec(0.173, new byte[] { 0x00, 0x32, 0x80, 0x4C }),
        new Rec(0.181, new byte[] { 0x00, 0x34, 0x00, 0x4D }),
        new Rec(0.189, new byte[] { 0x00, 0x36, 0x80, 0x4D }),
        new Rec(0.198, new byte[] { 0x00, 0x38, 0x00, 0x4E }),
        new Rec(0.206, new byte[] { 0x00, 0x3A, 0x80, 0x4E }),
        new Rec(0.215, new byte[] { 0x00, 0x3C, 0x00, 0x4F }),
        new Rec(0.225, new byte[] { 0x00, 0x3E, 0x80, 0x4F }),
        new Rec(0.230, new byte[] { 0x00, 0x40, 0x00, 0x50 }),
        new Rec(0.235, new byte[] { 0x00, 0x42, 0x80, 0x50 }),
        new Rec(0.240, new byte[] { 0x00, 0x44, 0x00, 0x51 }),
        new Rec(0.245, new byte[] { 0x00, 0x46, 0x80, 0x51 }),
        new Rec(0.251, new byte[] { 0x00, 0x48, 0x00, 0x52 }),
        new Rec(0.256, new byte[] { 0x00, 0x4A, 0x80, 0x52 }),
        new Rec(0.262, new byte[] { 0x00, 0x4C, 0x00, 0x53 }),
        new Rec(0.268, new byte[] { 0x00, 0x4E, 0x80, 0x53 }),
        new Rec(0.273, new byte[] { 0x00, 0x50, 0x00, 0x54 }),
        new Rec(0.279, new byte[] { 0x00, 0x52, 0x80, 0x54 }),
        new Rec(0.286, new byte[] { 0x00, 0x54, 0x00, 0x55 }),
        new Rec(0.292, new byte[] { 0x00, 0x56, 0x80, 0x55 }),
        new Rec(0.298, new byte[] { 0x00, 0x58, 0x00, 0x56 }),
        new Rec(0.305, new byte[] { 0x00, 0x5A, 0x80, 0x56 }),
        new Rec(0.311, new byte[] { 0x00, 0x5C, 0x00, 0x57 }),
        new Rec(0.318, new byte[] { 0x00, 0x5E, 0x80, 0x57 }),
        new Rec(0.325, new byte[] { 0x00, 0x60, 0x00, 0x58 }),
        new Rec(0.332, new byte[] { 0x00, 0x62, 0x80, 0x58 }),
        new Rec(0.340, new byte[] { 0x00, 0x64, 0x00, 0x59 }),
        new Rec(0.347, new byte[] { 0x00, 0x66, 0x80, 0x59 }),
        new Rec(0.355, new byte[] { 0x00, 0x68, 0x00, 0x5A }),
        new Rec(0.362, new byte[] { 0x00, 0x6A, 0x80, 0x5A }),
        new Rec(0.370, new byte[] { 0x00, 0x6C, 0x00, 0x5B }),
        new Rec(0.378, new byte[] { 0x00, 0x6E, 0x80, 0x5B }),
        new Rec(0.387, new byte[] { 0x00, 0x70, 0x00, 0x5C }),
        new Rec(0.395, new byte[] { 0x00, 0x72, 0x80, 0x5C }),
        new Rec(0.404, new byte[] { 0x00, 0x74, 0x00, 0x5D }),
        new Rec(0.413, new byte[] { 0x00, 0x76, 0x80, 0x5D }),
        new Rec(0.422, new byte[] { 0x00, 0x78, 0x00, 0x5E }),
        new Rec(0.431, new byte[] { 0x00, 0x7A, 0x80, 0x5E }),
        new Rec(0.440, new byte[] { 0x00, 0x7C, 0x00, 0x5F }),
        new Rec(0.450, new byte[] { 0x00, 0x7E, 0x80, 0x5F }),
        new Rec(0.460, new byte[] { 0x00, 0x80, 0x00, 0x60 }),
        new Rec(0.470, new byte[] { 0x00, 0x82, 0x80, 0x60 }),
        new Rec(0.480, new byte[] { 0x00, 0x84, 0x00, 0x61 }),
        new Rec(0.491, new byte[] { 0x00, 0x86, 0x80, 0x61 }),
        new Rec(0.501, new byte[] { 0x00, 0x88, 0x00, 0x62 }),
        new Rec(0.512, new byte[] { 0x00, 0x8A, 0x80, 0x62 }),
        new Rec(0.524, new byte[] { 0x00, 0x8C, 0x00, 0x63 }),
        new Rec(0.535, new byte[] { 0x00, 0x8E, 0x80, 0x63 }),
        new Rec(0.547, new byte[] { 0x00, 0x90, 0x00, 0x64 }),
        new Rec(0.559, new byte[] { 0x00, 0x92, 0x80, 0x64 }),
        new Rec(0.571, new byte[] { 0x00, 0x94, 0x00, 0x65 }),
        new Rec(0.584, new byte[] { 0x00, 0x96, 0x80, 0x65 }),
        new Rec(0.596, new byte[] { 0x00, 0x98, 0x00, 0x66 }),
        new Rec(0.609, new byte[] { 0x00, 0x9A, 0x80, 0x66 }),
        new Rec(0.623, new byte[] { 0x00, 0x9C, 0x00, 0x67 }),
        new Rec(0.636, new byte[] { 0x00, 0x9E, 0x80, 0x67 }),
        new Rec(0.650, new byte[] { 0x00, 0xA0, 0x00, 0x68 }),
        new Rec(0.665, new byte[] { 0x00, 0xA2, 0x80, 0x68 }),
        new Rec(0.679, new byte[] { 0x00, 0xA4, 0x00, 0x69 }),
        new Rec(0.694, new byte[] { 0x00, 0xA6, 0x80, 0x69 }),
        new Rec(0.709, new byte[] { 0x00, 0xA8, 0x00, 0x6A }),
        new Rec(0.725, new byte[] { 0x00, 0xAA, 0x80, 0x6A }),
        new Rec(0.741, new byte[] { 0x00, 0xAC, 0x00, 0x6B }),
        new Rec(0.757, new byte[] { 0x00, 0xAE, 0x80, 0x6B }),
        new Rec(0.773, new byte[] { 0x00, 0xB0, 0x00, 0x6C }),
        new Rec(0.790, new byte[] { 0x00, 0xB2, 0x80, 0x6C }),
        new Rec(0.808, new byte[] { 0x00, 0xB4, 0x00, 0x6D }),
        new Rec(0.825, new byte[] { 0x00, 0xB6, 0x80, 0x6D }),
        new Rec(0.843, new byte[] { 0x00, 0xB8, 0x00, 0x6E }),
        new Rec(0.862, new byte[] { 0x00, 0xBA, 0x80, 0x6E }),
        new Rec(0.881, new byte[] { 0x00, 0xBC, 0x00, 0x6F }),
        new Rec(0.900, new byte[] { 0x00, 0xBE, 0x80, 0x6F }),
        new Rec(0.920, new byte[] { 0x00, 0xC0, 0x00, 0x70 }),
        new Rec(0.940, new byte[] { 0x00, 0xC2, 0x80, 0x70 }),
        new Rec(0.960, new byte[] { 0x00, 0xC4, 0x00, 0x71 }),
        new Rec(0.981, new byte[] { 0x00, 0xC6, 0x80, 0x71 }),
        new Rec(1.003, new byte[] { 0x00, 0xC8, 0x00, 0x72 }),
    ];

    private struct Rec
    {
        public double Value;
        public byte[] Data;

        public Rec(double freq, byte[] data)
        {
            Value = freq;
            Data = data;
        }
    }
}
